// Code generated by mockery v2.42.0. DO NOT EDIT.

package middleware

import (
	config "gotu-bookstore/pkg/auth/config"
	dto "gotu-bookstore/pkg/auth/dto"

	mock "github.com/stretchr/testify/mock"
)

// AuthServiceInterface is an autogenerated mock type for the AuthServiceInterface type
type AuthServiceInterface struct {
	mock.Mock
}

type AuthServiceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *AuthServiceInterface) EXPECT() *AuthServiceInterface_Expecter {
	return &AuthServiceInterface_Expecter{mock: &_m.Mock}
}

// VerifyToken provides a mock function with given fields: _a0, token, leeway
func (_m *AuthServiceInterface) VerifyToken(_a0 config.BaseConfig, token string, leeway int64) (map[string]interface{}, error) {
	ret := _m.Called(_a0, token, leeway)

	if len(ret) == 0 {
		panic("no return value specified for VerifyToken")
	}

	var r0 map[string]interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(config.BaseConfig, string, int64) (map[string]interface{}, error)); ok {
		return rf(_a0, token, leeway)
	}
	if rf, ok := ret.Get(0).(func(config.BaseConfig, string, int64) map[string]interface{}); ok {
		r0 = rf(_a0, token, leeway)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(config.BaseConfig, string, int64) error); ok {
		r1 = rf(_a0, token, leeway)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthServiceInterface_VerifyToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyToken'
type AuthServiceInterface_VerifyToken_Call struct {
	*mock.Call
}

// VerifyToken is a helper method to define mock.On call
//   - _a0 config.BaseConfig
//   - token string
//   - leeway int64
func (_e *AuthServiceInterface_Expecter) VerifyToken(_a0 interface{}, token interface{}, leeway interface{}) *AuthServiceInterface_VerifyToken_Call {
	return &AuthServiceInterface_VerifyToken_Call{Call: _e.mock.On("VerifyToken", _a0, token, leeway)}
}

func (_c *AuthServiceInterface_VerifyToken_Call) Run(run func(_a0 config.BaseConfig, token string, leeway int64)) *AuthServiceInterface_VerifyToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(config.BaseConfig), args[1].(string), args[2].(int64))
	})
	return _c
}

func (_c *AuthServiceInterface_VerifyToken_Call) Return(_a0 map[string]interface{}, _a1 error) *AuthServiceInterface_VerifyToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuthServiceInterface_VerifyToken_Call) RunAndReturn(run func(config.BaseConfig, string, int64) (map[string]interface{}, error)) *AuthServiceInterface_VerifyToken_Call {
	_c.Call.Return(run)
	return _c
}

// VerifyTokenToSessionDTO provides a mock function with given fields: _a0, token, leeway
func (_m *AuthServiceInterface) VerifyTokenToSessionDTO(_a0 config.BaseConfig, token string, leeway int64) (*dto.SessionDTO, error) {
	ret := _m.Called(_a0, token, leeway)

	if len(ret) == 0 {
		panic("no return value specified for VerifyTokenToSessionDTO")
	}

	var r0 *dto.SessionDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(config.BaseConfig, string, int64) (*dto.SessionDTO, error)); ok {
		return rf(_a0, token, leeway)
	}
	if rf, ok := ret.Get(0).(func(config.BaseConfig, string, int64) *dto.SessionDTO); ok {
		r0 = rf(_a0, token, leeway)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.SessionDTO)
		}
	}

	if rf, ok := ret.Get(1).(func(config.BaseConfig, string, int64) error); ok {
		r1 = rf(_a0, token, leeway)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthServiceInterface_VerifyTokenToSessionDTO_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyTokenToSessionDTO'
type AuthServiceInterface_VerifyTokenToSessionDTO_Call struct {
	*mock.Call
}

// VerifyTokenToSessionDTO is a helper method to define mock.On call
//   - _a0 config.BaseConfig
//   - token string
//   - leeway int64
func (_e *AuthServiceInterface_Expecter) VerifyTokenToSessionDTO(_a0 interface{}, token interface{}, leeway interface{}) *AuthServiceInterface_VerifyTokenToSessionDTO_Call {
	return &AuthServiceInterface_VerifyTokenToSessionDTO_Call{Call: _e.mock.On("VerifyTokenToSessionDTO", _a0, token, leeway)}
}

func (_c *AuthServiceInterface_VerifyTokenToSessionDTO_Call) Run(run func(_a0 config.BaseConfig, token string, leeway int64)) *AuthServiceInterface_VerifyTokenToSessionDTO_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(config.BaseConfig), args[1].(string), args[2].(int64))
	})
	return _c
}

func (_c *AuthServiceInterface_VerifyTokenToSessionDTO_Call) Return(_a0 *dto.SessionDTO, _a1 error) *AuthServiceInterface_VerifyTokenToSessionDTO_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuthServiceInterface_VerifyTokenToSessionDTO_Call) RunAndReturn(run func(config.BaseConfig, string, int64) (*dto.SessionDTO, error)) *AuthServiceInterface_VerifyTokenToSessionDTO_Call {
	_c.Call.Return(run)
	return _c
}

// NewAuthServiceInterface creates a new instance of AuthServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthServiceInterface {
	mock := &AuthServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
