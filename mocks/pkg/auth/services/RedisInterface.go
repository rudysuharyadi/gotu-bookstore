// Code generated by mockery v2.42.0. DO NOT EDIT.

package services

import mock "github.com/stretchr/testify/mock"

// RedisInterface is an autogenerated mock type for the RedisInterface type
type RedisInterface struct {
	mock.Mock
}

type RedisInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *RedisInterface) EXPECT() *RedisInterface_Expecter {
	return &RedisInterface_Expecter{mock: &_m.Mock}
}

// Exists provides a mock function with given fields: key
func (_m *RedisInterface) Exists(key ...string) bool {
	_va := make([]interface{}, len(key))
	for _i := range key {
		_va[_i] = key[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Exists")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(...string) bool); ok {
		r0 = rf(key...)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// RedisInterface_Exists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exists'
type RedisInterface_Exists_Call struct {
	*mock.Call
}

// Exists is a helper method to define mock.On call
//   - key ...string
func (_e *RedisInterface_Expecter) Exists(key ...interface{}) *RedisInterface_Exists_Call {
	return &RedisInterface_Exists_Call{Call: _e.mock.On("Exists",
		append([]interface{}{}, key...)...)}
}

func (_c *RedisInterface_Exists_Call) Run(run func(key ...string)) *RedisInterface_Exists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *RedisInterface_Exists_Call) Return(_a0 bool) *RedisInterface_Exists_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RedisInterface_Exists_Call) RunAndReturn(run func(...string) bool) *RedisInterface_Exists_Call {
	_c.Call.Return(run)
	return _c
}

// Set provides a mock function with given fields: key, data
func (_m *RedisInterface) Set(key string, data interface{}) error {
	ret := _m.Called(key, data)

	if len(ret) == 0 {
		panic("no return value specified for Set")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, interface{}) error); ok {
		r0 = rf(key, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RedisInterface_Set_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Set'
type RedisInterface_Set_Call struct {
	*mock.Call
}

// Set is a helper method to define mock.On call
//   - key string
//   - data interface{}
func (_e *RedisInterface_Expecter) Set(key interface{}, data interface{}) *RedisInterface_Set_Call {
	return &RedisInterface_Set_Call{Call: _e.mock.On("Set", key, data)}
}

func (_c *RedisInterface_Set_Call) Run(run func(key string, data interface{})) *RedisInterface_Set_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(interface{}))
	})
	return _c
}

func (_c *RedisInterface_Set_Call) Return(_a0 error) *RedisInterface_Set_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RedisInterface_Set_Call) RunAndReturn(run func(string, interface{}) error) *RedisInterface_Set_Call {
	_c.Call.Return(run)
	return _c
}

// SetnxWithExpiry provides a mock function with given fields: key, data, time
func (_m *RedisInterface) SetnxWithExpiry(key string, data interface{}, time int) error {
	ret := _m.Called(key, data, time)

	if len(ret) == 0 {
		panic("no return value specified for SetnxWithExpiry")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, interface{}, int) error); ok {
		r0 = rf(key, data, time)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RedisInterface_SetnxWithExpiry_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetnxWithExpiry'
type RedisInterface_SetnxWithExpiry_Call struct {
	*mock.Call
}

// SetnxWithExpiry is a helper method to define mock.On call
//   - key string
//   - data interface{}
//   - time int
func (_e *RedisInterface_Expecter) SetnxWithExpiry(key interface{}, data interface{}, time interface{}) *RedisInterface_SetnxWithExpiry_Call {
	return &RedisInterface_SetnxWithExpiry_Call{Call: _e.mock.On("SetnxWithExpiry", key, data, time)}
}

func (_c *RedisInterface_SetnxWithExpiry_Call) Run(run func(key string, data interface{}, time int)) *RedisInterface_SetnxWithExpiry_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(interface{}), args[2].(int))
	})
	return _c
}

func (_c *RedisInterface_SetnxWithExpiry_Call) Return(_a0 error) *RedisInterface_SetnxWithExpiry_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RedisInterface_SetnxWithExpiry_Call) RunAndReturn(run func(string, interface{}, int) error) *RedisInterface_SetnxWithExpiry_Call {
	_c.Call.Return(run)
	return _c
}

// NewRedisInterface creates a new instance of RedisInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRedisInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *RedisInterface {
	mock := &RedisInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
