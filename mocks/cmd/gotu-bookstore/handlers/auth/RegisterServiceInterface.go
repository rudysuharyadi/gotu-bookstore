// Code generated by mockery v2.42.0. DO NOT EDIT.

package auth

import (
	contractsauth "gotu-bookstore/cmd/gotu-bookstore/contracts/auth"

	mock "github.com/stretchr/testify/mock"
)

// RegisterServiceInterface is an autogenerated mock type for the RegisterServiceInterface type
type RegisterServiceInterface struct {
	mock.Mock
}

type RegisterServiceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *RegisterServiceInterface) EXPECT() *RegisterServiceInterface_Expecter {
	return &RegisterServiceInterface_Expecter{mock: &_m.Mock}
}

// ProcessingRegister provides a mock function with given fields: request
func (_m *RegisterServiceInterface) ProcessingRegister(request contractsauth.RegisterRequest) (*contractsauth.RegisterResponse, error) {
	ret := _m.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for ProcessingRegister")
	}

	var r0 *contractsauth.RegisterResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(contractsauth.RegisterRequest) (*contractsauth.RegisterResponse, error)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(contractsauth.RegisterRequest) *contractsauth.RegisterResponse); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*contractsauth.RegisterResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(contractsauth.RegisterRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterServiceInterface_ProcessingRegister_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessingRegister'
type RegisterServiceInterface_ProcessingRegister_Call struct {
	*mock.Call
}

// ProcessingRegister is a helper method to define mock.On call
//   - request contractsauth.RegisterRequest
func (_e *RegisterServiceInterface_Expecter) ProcessingRegister(request interface{}) *RegisterServiceInterface_ProcessingRegister_Call {
	return &RegisterServiceInterface_ProcessingRegister_Call{Call: _e.mock.On("ProcessingRegister", request)}
}

func (_c *RegisterServiceInterface_ProcessingRegister_Call) Run(run func(request contractsauth.RegisterRequest)) *RegisterServiceInterface_ProcessingRegister_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(contractsauth.RegisterRequest))
	})
	return _c
}

func (_c *RegisterServiceInterface_ProcessingRegister_Call) Return(_a0 *contractsauth.RegisterResponse, _a1 error) *RegisterServiceInterface_ProcessingRegister_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RegisterServiceInterface_ProcessingRegister_Call) RunAndReturn(run func(contractsauth.RegisterRequest) (*contractsauth.RegisterResponse, error)) *RegisterServiceInterface_ProcessingRegister_Call {
	_c.Call.Return(run)
	return _c
}

// NewRegisterServiceInterface creates a new instance of RegisterServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRegisterServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *RegisterServiceInterface {
	mock := &RegisterServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
