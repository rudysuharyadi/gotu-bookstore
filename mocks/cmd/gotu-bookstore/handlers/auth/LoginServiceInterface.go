// Code generated by mockery v2.42.0. DO NOT EDIT.

package auth

import (
	contractsauth "gotu-bookstore/cmd/gotu-bookstore/contracts/auth"

	mock "github.com/stretchr/testify/mock"
)

// LoginServiceInterface is an autogenerated mock type for the LoginServiceInterface type
type LoginServiceInterface struct {
	mock.Mock
}

type LoginServiceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *LoginServiceInterface) EXPECT() *LoginServiceInterface_Expecter {
	return &LoginServiceInterface_Expecter{mock: &_m.Mock}
}

// ProcessingLogin provides a mock function with given fields: request
func (_m *LoginServiceInterface) ProcessingLogin(request contractsauth.LoginRequest) (*contractsauth.LoginResponse, error) {
	ret := _m.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for ProcessingLogin")
	}

	var r0 *contractsauth.LoginResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(contractsauth.LoginRequest) (*contractsauth.LoginResponse, error)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(contractsauth.LoginRequest) *contractsauth.LoginResponse); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*contractsauth.LoginResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(contractsauth.LoginRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoginServiceInterface_ProcessingLogin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessingLogin'
type LoginServiceInterface_ProcessingLogin_Call struct {
	*mock.Call
}

// ProcessingLogin is a helper method to define mock.On call
//   - request contractsauth.LoginRequest
func (_e *LoginServiceInterface_Expecter) ProcessingLogin(request interface{}) *LoginServiceInterface_ProcessingLogin_Call {
	return &LoginServiceInterface_ProcessingLogin_Call{Call: _e.mock.On("ProcessingLogin", request)}
}

func (_c *LoginServiceInterface_ProcessingLogin_Call) Run(run func(request contractsauth.LoginRequest)) *LoginServiceInterface_ProcessingLogin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(contractsauth.LoginRequest))
	})
	return _c
}

func (_c *LoginServiceInterface_ProcessingLogin_Call) Return(_a0 *contractsauth.LoginResponse, _a1 error) *LoginServiceInterface_ProcessingLogin_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *LoginServiceInterface_ProcessingLogin_Call) RunAndReturn(run func(contractsauth.LoginRequest) (*contractsauth.LoginResponse, error)) *LoginServiceInterface_ProcessingLogin_Call {
	_c.Call.Return(run)
	return _c
}

// NewLoginServiceInterface creates a new instance of LoginServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLoginServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *LoginServiceInterface {
	mock := &LoginServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
