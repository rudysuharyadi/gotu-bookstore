// Code generated by mockery v2.42.0. DO NOT EDIT.

package shopping_cart

import (
	contractsshopping_cart "gotu-bookstore/cmd/gotu-bookstore/contracts/shopping_cart"

	mock "github.com/stretchr/testify/mock"
)

// PostShoppingCartClearServiceInterface is an autogenerated mock type for the PostShoppingCartClearServiceInterface type
type PostShoppingCartClearServiceInterface struct {
	mock.Mock
}

type PostShoppingCartClearServiceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *PostShoppingCartClearServiceInterface) EXPECT() *PostShoppingCartClearServiceInterface_Expecter {
	return &PostShoppingCartClearServiceInterface_Expecter{mock: &_m.Mock}
}

// ProcessingPostShoppingCartClear provides a mock function with given fields:
func (_m *PostShoppingCartClearServiceInterface) ProcessingPostShoppingCartClear() (*contractsshopping_cart.PostShoppingCartClearResponse, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ProcessingPostShoppingCartClear")
	}

	var r0 *contractsshopping_cart.PostShoppingCartClearResponse
	var r1 error
	if rf, ok := ret.Get(0).(func() (*contractsshopping_cart.PostShoppingCartClearResponse, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *contractsshopping_cart.PostShoppingCartClearResponse); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*contractsshopping_cart.PostShoppingCartClearResponse)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostShoppingCartClearServiceInterface_ProcessingPostShoppingCartClear_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessingPostShoppingCartClear'
type PostShoppingCartClearServiceInterface_ProcessingPostShoppingCartClear_Call struct {
	*mock.Call
}

// ProcessingPostShoppingCartClear is a helper method to define mock.On call
func (_e *PostShoppingCartClearServiceInterface_Expecter) ProcessingPostShoppingCartClear() *PostShoppingCartClearServiceInterface_ProcessingPostShoppingCartClear_Call {
	return &PostShoppingCartClearServiceInterface_ProcessingPostShoppingCartClear_Call{Call: _e.mock.On("ProcessingPostShoppingCartClear")}
}

func (_c *PostShoppingCartClearServiceInterface_ProcessingPostShoppingCartClear_Call) Run(run func()) *PostShoppingCartClearServiceInterface_ProcessingPostShoppingCartClear_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *PostShoppingCartClearServiceInterface_ProcessingPostShoppingCartClear_Call) Return(_a0 *contractsshopping_cart.PostShoppingCartClearResponse, _a1 error) *PostShoppingCartClearServiceInterface_ProcessingPostShoppingCartClear_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PostShoppingCartClearServiceInterface_ProcessingPostShoppingCartClear_Call) RunAndReturn(run func() (*contractsshopping_cart.PostShoppingCartClearResponse, error)) *PostShoppingCartClearServiceInterface_ProcessingPostShoppingCartClear_Call {
	_c.Call.Return(run)
	return _c
}

// NewPostShoppingCartClearServiceInterface creates a new instance of PostShoppingCartClearServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPostShoppingCartClearServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *PostShoppingCartClearServiceInterface {
	mock := &PostShoppingCartClearServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
