// Code generated by mockery v2.42.0. DO NOT EDIT.

package shopping_cart

import (
	contractsshopping_cart "gotu-bookstore/cmd/gotu-bookstore/contracts/shopping_cart"

	mock "github.com/stretchr/testify/mock"
)

// PostShoppingCartServiceInterface is an autogenerated mock type for the PostShoppingCartServiceInterface type
type PostShoppingCartServiceInterface struct {
	mock.Mock
}

type PostShoppingCartServiceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *PostShoppingCartServiceInterface) EXPECT() *PostShoppingCartServiceInterface_Expecter {
	return &PostShoppingCartServiceInterface_Expecter{mock: &_m.Mock}
}

// ProcessingPostShoppingCart provides a mock function with given fields: request
func (_m *PostShoppingCartServiceInterface) ProcessingPostShoppingCart(request contractsshopping_cart.PostShoppingCartRequest) (*contractsshopping_cart.ShoppingCartResponse, error) {
	ret := _m.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for ProcessingPostShoppingCart")
	}

	var r0 *contractsshopping_cart.ShoppingCartResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(contractsshopping_cart.PostShoppingCartRequest) (*contractsshopping_cart.ShoppingCartResponse, error)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(contractsshopping_cart.PostShoppingCartRequest) *contractsshopping_cart.ShoppingCartResponse); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*contractsshopping_cart.ShoppingCartResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(contractsshopping_cart.PostShoppingCartRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostShoppingCartServiceInterface_ProcessingPostShoppingCart_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessingPostShoppingCart'
type PostShoppingCartServiceInterface_ProcessingPostShoppingCart_Call struct {
	*mock.Call
}

// ProcessingPostShoppingCart is a helper method to define mock.On call
//   - request contractsshopping_cart.PostShoppingCartRequest
func (_e *PostShoppingCartServiceInterface_Expecter) ProcessingPostShoppingCart(request interface{}) *PostShoppingCartServiceInterface_ProcessingPostShoppingCart_Call {
	return &PostShoppingCartServiceInterface_ProcessingPostShoppingCart_Call{Call: _e.mock.On("ProcessingPostShoppingCart", request)}
}

func (_c *PostShoppingCartServiceInterface_ProcessingPostShoppingCart_Call) Run(run func(request contractsshopping_cart.PostShoppingCartRequest)) *PostShoppingCartServiceInterface_ProcessingPostShoppingCart_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(contractsshopping_cart.PostShoppingCartRequest))
	})
	return _c
}

func (_c *PostShoppingCartServiceInterface_ProcessingPostShoppingCart_Call) Return(_a0 *contractsshopping_cart.ShoppingCartResponse, _a1 error) *PostShoppingCartServiceInterface_ProcessingPostShoppingCart_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PostShoppingCartServiceInterface_ProcessingPostShoppingCart_Call) RunAndReturn(run func(contractsshopping_cart.PostShoppingCartRequest) (*contractsshopping_cart.ShoppingCartResponse, error)) *PostShoppingCartServiceInterface_ProcessingPostShoppingCart_Call {
	_c.Call.Return(run)
	return _c
}

// NewPostShoppingCartServiceInterface creates a new instance of PostShoppingCartServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPostShoppingCartServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *PostShoppingCartServiceInterface {
	mock := &PostShoppingCartServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
