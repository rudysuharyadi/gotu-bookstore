// Code generated by mockery v2.42.0. DO NOT EDIT.

package books

import (
	contractsbooks "gotu-bookstore/cmd/gotu-bookstore/contracts/books"

	mock "github.com/stretchr/testify/mock"
)

// GetBooksServiceInterface is an autogenerated mock type for the GetBooksServiceInterface type
type GetBooksServiceInterface struct {
	mock.Mock
}

type GetBooksServiceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *GetBooksServiceInterface) EXPECT() *GetBooksServiceInterface_Expecter {
	return &GetBooksServiceInterface_Expecter{mock: &_m.Mock}
}

// ProcessingGetBooks provides a mock function with given fields: request
func (_m *GetBooksServiceInterface) ProcessingGetBooks(request contractsbooks.GetBooksRequest) (*contractsbooks.GetBooksResponse, map[string]interface{}, error) {
	ret := _m.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for ProcessingGetBooks")
	}

	var r0 *contractsbooks.GetBooksResponse
	var r1 map[string]interface{}
	var r2 error
	if rf, ok := ret.Get(0).(func(contractsbooks.GetBooksRequest) (*contractsbooks.GetBooksResponse, map[string]interface{}, error)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(contractsbooks.GetBooksRequest) *contractsbooks.GetBooksResponse); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*contractsbooks.GetBooksResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(contractsbooks.GetBooksRequest) map[string]interface{}); ok {
		r1 = rf(request)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(map[string]interface{})
		}
	}

	if rf, ok := ret.Get(2).(func(contractsbooks.GetBooksRequest) error); ok {
		r2 = rf(request)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetBooksServiceInterface_ProcessingGetBooks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessingGetBooks'
type GetBooksServiceInterface_ProcessingGetBooks_Call struct {
	*mock.Call
}

// ProcessingGetBooks is a helper method to define mock.On call
//   - request contractsbooks.GetBooksRequest
func (_e *GetBooksServiceInterface_Expecter) ProcessingGetBooks(request interface{}) *GetBooksServiceInterface_ProcessingGetBooks_Call {
	return &GetBooksServiceInterface_ProcessingGetBooks_Call{Call: _e.mock.On("ProcessingGetBooks", request)}
}

func (_c *GetBooksServiceInterface_ProcessingGetBooks_Call) Run(run func(request contractsbooks.GetBooksRequest)) *GetBooksServiceInterface_ProcessingGetBooks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(contractsbooks.GetBooksRequest))
	})
	return _c
}

func (_c *GetBooksServiceInterface_ProcessingGetBooks_Call) Return(_a0 *contractsbooks.GetBooksResponse, _a1 map[string]interface{}, _a2 error) *GetBooksServiceInterface_ProcessingGetBooks_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *GetBooksServiceInterface_ProcessingGetBooks_Call) RunAndReturn(run func(contractsbooks.GetBooksRequest) (*contractsbooks.GetBooksResponse, map[string]interface{}, error)) *GetBooksServiceInterface_ProcessingGetBooks_Call {
	_c.Call.Return(run)
	return _c
}

// NewGetBooksServiceInterface creates a new instance of GetBooksServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGetBooksServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *GetBooksServiceInterface {
	mock := &GetBooksServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
