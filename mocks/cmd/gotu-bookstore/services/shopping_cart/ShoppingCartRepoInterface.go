// Code generated by mockery v2.42.0. DO NOT EDIT.

package shopping_cart

import (
	models "gotu-bookstore/cmd/gotu-bookstore/models"

	mock "github.com/stretchr/testify/mock"
)

// ShoppingCartRepoInterface is an autogenerated mock type for the ShoppingCartRepoInterface type
type ShoppingCartRepoInterface struct {
	mock.Mock
}

type ShoppingCartRepoInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *ShoppingCartRepoInterface) EXPECT() *ShoppingCartRepoInterface_Expecter {
	return &ShoppingCartRepoInterface_Expecter{mock: &_m.Mock}
}

// AddItemToCart provides a mock function with given fields: input
func (_m *ShoppingCartRepoInterface) AddItemToCart(input models.ShoppingCarts) (*models.ShoppingCarts, error) {
	ret := _m.Called(input)

	if len(ret) == 0 {
		panic("no return value specified for AddItemToCart")
	}

	var r0 *models.ShoppingCarts
	var r1 error
	if rf, ok := ret.Get(0).(func(models.ShoppingCarts) (*models.ShoppingCarts, error)); ok {
		return rf(input)
	}
	if rf, ok := ret.Get(0).(func(models.ShoppingCarts) *models.ShoppingCarts); ok {
		r0 = rf(input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ShoppingCarts)
		}
	}

	if rf, ok := ret.Get(1).(func(models.ShoppingCarts) error); ok {
		r1 = rf(input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ShoppingCartRepoInterface_AddItemToCart_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddItemToCart'
type ShoppingCartRepoInterface_AddItemToCart_Call struct {
	*mock.Call
}

// AddItemToCart is a helper method to define mock.On call
//   - input models.ShoppingCarts
func (_e *ShoppingCartRepoInterface_Expecter) AddItemToCart(input interface{}) *ShoppingCartRepoInterface_AddItemToCart_Call {
	return &ShoppingCartRepoInterface_AddItemToCart_Call{Call: _e.mock.On("AddItemToCart", input)}
}

func (_c *ShoppingCartRepoInterface_AddItemToCart_Call) Run(run func(input models.ShoppingCarts)) *ShoppingCartRepoInterface_AddItemToCart_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.ShoppingCarts))
	})
	return _c
}

func (_c *ShoppingCartRepoInterface_AddItemToCart_Call) Return(_a0 *models.ShoppingCarts, _a1 error) *ShoppingCartRepoInterface_AddItemToCart_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ShoppingCartRepoInterface_AddItemToCart_Call) RunAndReturn(run func(models.ShoppingCarts) (*models.ShoppingCarts, error)) *ShoppingCartRepoInterface_AddItemToCart_Call {
	_c.Call.Return(run)
	return _c
}

// ClearShoppingCart provides a mock function with given fields: userId
func (_m *ShoppingCartRepoInterface) ClearShoppingCart(userId string) error {
	ret := _m.Called(userId)

	if len(ret) == 0 {
		panic("no return value specified for ClearShoppingCart")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ShoppingCartRepoInterface_ClearShoppingCart_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClearShoppingCart'
type ShoppingCartRepoInterface_ClearShoppingCart_Call struct {
	*mock.Call
}

// ClearShoppingCart is a helper method to define mock.On call
//   - userId string
func (_e *ShoppingCartRepoInterface_Expecter) ClearShoppingCart(userId interface{}) *ShoppingCartRepoInterface_ClearShoppingCart_Call {
	return &ShoppingCartRepoInterface_ClearShoppingCart_Call{Call: _e.mock.On("ClearShoppingCart", userId)}
}

func (_c *ShoppingCartRepoInterface_ClearShoppingCart_Call) Run(run func(userId string)) *ShoppingCartRepoInterface_ClearShoppingCart_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ShoppingCartRepoInterface_ClearShoppingCart_Call) Return(_a0 error) *ShoppingCartRepoInterface_ClearShoppingCart_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ShoppingCartRepoInterface_ClearShoppingCart_Call) RunAndReturn(run func(string) error) *ShoppingCartRepoInterface_ClearShoppingCart_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteByBookId provides a mock function with given fields: bookId, userId
func (_m *ShoppingCartRepoInterface) DeleteByBookId(bookId string, userId string) error {
	ret := _m.Called(bookId, userId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByBookId")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(bookId, userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ShoppingCartRepoInterface_DeleteByBookId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteByBookId'
type ShoppingCartRepoInterface_DeleteByBookId_Call struct {
	*mock.Call
}

// DeleteByBookId is a helper method to define mock.On call
//   - bookId string
//   - userId string
func (_e *ShoppingCartRepoInterface_Expecter) DeleteByBookId(bookId interface{}, userId interface{}) *ShoppingCartRepoInterface_DeleteByBookId_Call {
	return &ShoppingCartRepoInterface_DeleteByBookId_Call{Call: _e.mock.On("DeleteByBookId", bookId, userId)}
}

func (_c *ShoppingCartRepoInterface_DeleteByBookId_Call) Run(run func(bookId string, userId string)) *ShoppingCartRepoInterface_DeleteByBookId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *ShoppingCartRepoInterface_DeleteByBookId_Call) Return(_a0 error) *ShoppingCartRepoInterface_DeleteByBookId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ShoppingCartRepoInterface_DeleteByBookId_Call) RunAndReturn(run func(string, string) error) *ShoppingCartRepoInterface_DeleteByBookId_Call {
	_c.Call.Return(run)
	return _c
}

// GetByUserId provides a mock function with given fields: userId
func (_m *ShoppingCartRepoInterface) GetByUserId(userId string) ([]models.ShoppingCarts, error) {
	ret := _m.Called(userId)

	if len(ret) == 0 {
		panic("no return value specified for GetByUserId")
	}

	var r0 []models.ShoppingCarts
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]models.ShoppingCarts, error)); ok {
		return rf(userId)
	}
	if rf, ok := ret.Get(0).(func(string) []models.ShoppingCarts); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.ShoppingCarts)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ShoppingCartRepoInterface_GetByUserId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByUserId'
type ShoppingCartRepoInterface_GetByUserId_Call struct {
	*mock.Call
}

// GetByUserId is a helper method to define mock.On call
//   - userId string
func (_e *ShoppingCartRepoInterface_Expecter) GetByUserId(userId interface{}) *ShoppingCartRepoInterface_GetByUserId_Call {
	return &ShoppingCartRepoInterface_GetByUserId_Call{Call: _e.mock.On("GetByUserId", userId)}
}

func (_c *ShoppingCartRepoInterface_GetByUserId_Call) Run(run func(userId string)) *ShoppingCartRepoInterface_GetByUserId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *ShoppingCartRepoInterface_GetByUserId_Call) Return(_a0 []models.ShoppingCarts, _a1 error) *ShoppingCartRepoInterface_GetByUserId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ShoppingCartRepoInterface_GetByUserId_Call) RunAndReturn(run func(string) ([]models.ShoppingCarts, error)) *ShoppingCartRepoInterface_GetByUserId_Call {
	_c.Call.Return(run)
	return _c
}

// GetItemByBookId provides a mock function with given fields: bookId, userId
func (_m *ShoppingCartRepoInterface) GetItemByBookId(bookId string, userId string) (*models.ShoppingCarts, error) {
	ret := _m.Called(bookId, userId)

	if len(ret) == 0 {
		panic("no return value specified for GetItemByBookId")
	}

	var r0 *models.ShoppingCarts
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*models.ShoppingCarts, error)); ok {
		return rf(bookId, userId)
	}
	if rf, ok := ret.Get(0).(func(string, string) *models.ShoppingCarts); ok {
		r0 = rf(bookId, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ShoppingCarts)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(bookId, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ShoppingCartRepoInterface_GetItemByBookId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetItemByBookId'
type ShoppingCartRepoInterface_GetItemByBookId_Call struct {
	*mock.Call
}

// GetItemByBookId is a helper method to define mock.On call
//   - bookId string
//   - userId string
func (_e *ShoppingCartRepoInterface_Expecter) GetItemByBookId(bookId interface{}, userId interface{}) *ShoppingCartRepoInterface_GetItemByBookId_Call {
	return &ShoppingCartRepoInterface_GetItemByBookId_Call{Call: _e.mock.On("GetItemByBookId", bookId, userId)}
}

func (_c *ShoppingCartRepoInterface_GetItemByBookId_Call) Run(run func(bookId string, userId string)) *ShoppingCartRepoInterface_GetItemByBookId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *ShoppingCartRepoInterface_GetItemByBookId_Call) Return(_a0 *models.ShoppingCarts, _a1 error) *ShoppingCartRepoInterface_GetItemByBookId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ShoppingCartRepoInterface_GetItemByBookId_Call) RunAndReturn(run func(string, string) (*models.ShoppingCarts, error)) *ShoppingCartRepoInterface_GetItemByBookId_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateByBookId provides a mock function with given fields: bookId, quantity, userId
func (_m *ShoppingCartRepoInterface) UpdateByBookId(bookId string, quantity int64, userId string) error {
	ret := _m.Called(bookId, quantity, userId)

	if len(ret) == 0 {
		panic("no return value specified for UpdateByBookId")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, int64, string) error); ok {
		r0 = rf(bookId, quantity, userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ShoppingCartRepoInterface_UpdateByBookId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateByBookId'
type ShoppingCartRepoInterface_UpdateByBookId_Call struct {
	*mock.Call
}

// UpdateByBookId is a helper method to define mock.On call
//   - bookId string
//   - quantity int64
//   - userId string
func (_e *ShoppingCartRepoInterface_Expecter) UpdateByBookId(bookId interface{}, quantity interface{}, userId interface{}) *ShoppingCartRepoInterface_UpdateByBookId_Call {
	return &ShoppingCartRepoInterface_UpdateByBookId_Call{Call: _e.mock.On("UpdateByBookId", bookId, quantity, userId)}
}

func (_c *ShoppingCartRepoInterface_UpdateByBookId_Call) Run(run func(bookId string, quantity int64, userId string)) *ShoppingCartRepoInterface_UpdateByBookId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(int64), args[2].(string))
	})
	return _c
}

func (_c *ShoppingCartRepoInterface_UpdateByBookId_Call) Return(_a0 error) *ShoppingCartRepoInterface_UpdateByBookId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ShoppingCartRepoInterface_UpdateByBookId_Call) RunAndReturn(run func(string, int64, string) error) *ShoppingCartRepoInterface_UpdateByBookId_Call {
	_c.Call.Return(run)
	return _c
}

// NewShoppingCartRepoInterface creates a new instance of ShoppingCartRepoInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewShoppingCartRepoInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *ShoppingCartRepoInterface {
	mock := &ShoppingCartRepoInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
