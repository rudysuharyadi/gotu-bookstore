// Code generated by mockery v2.42.0. DO NOT EDIT.

package shopping_cart

import (
	models "gotu-bookstore/cmd/gotu-bookstore/models"

	mock "github.com/stretchr/testify/mock"
)

// TransactionRepoInterface is an autogenerated mock type for the TransactionRepoInterface type
type TransactionRepoInterface struct {
	mock.Mock
}

type TransactionRepoInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *TransactionRepoInterface) EXPECT() *TransactionRepoInterface_Expecter {
	return &TransactionRepoInterface_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: input
func (_m *TransactionRepoInterface) Create(input models.Transactions) (*models.Transactions, error) {
	ret := _m.Called(input)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *models.Transactions
	var r1 error
	if rf, ok := ret.Get(0).(func(models.Transactions) (*models.Transactions, error)); ok {
		return rf(input)
	}
	if rf, ok := ret.Get(0).(func(models.Transactions) *models.Transactions); ok {
		r0 = rf(input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Transactions)
		}
	}

	if rf, ok := ret.Get(1).(func(models.Transactions) error); ok {
		r1 = rf(input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TransactionRepoInterface_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type TransactionRepoInterface_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - input models.Transactions
func (_e *TransactionRepoInterface_Expecter) Create(input interface{}) *TransactionRepoInterface_Create_Call {
	return &TransactionRepoInterface_Create_Call{Call: _e.mock.On("Create", input)}
}

func (_c *TransactionRepoInterface_Create_Call) Run(run func(input models.Transactions)) *TransactionRepoInterface_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.Transactions))
	})
	return _c
}

func (_c *TransactionRepoInterface_Create_Call) Return(_a0 *models.Transactions, _a1 error) *TransactionRepoInterface_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TransactionRepoInterface_Create_Call) RunAndReturn(run func(models.Transactions) (*models.Transactions, error)) *TransactionRepoInterface_Create_Call {
	_c.Call.Return(run)
	return _c
}

// GenerateInvoiceCounter provides a mock function with given fields:
func (_m *TransactionRepoInterface) GenerateInvoiceCounter() (int64, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GenerateInvoiceCounter")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func() (int64, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TransactionRepoInterface_GenerateInvoiceCounter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateInvoiceCounter'
type TransactionRepoInterface_GenerateInvoiceCounter_Call struct {
	*mock.Call
}

// GenerateInvoiceCounter is a helper method to define mock.On call
func (_e *TransactionRepoInterface_Expecter) GenerateInvoiceCounter() *TransactionRepoInterface_GenerateInvoiceCounter_Call {
	return &TransactionRepoInterface_GenerateInvoiceCounter_Call{Call: _e.mock.On("GenerateInvoiceCounter")}
}

func (_c *TransactionRepoInterface_GenerateInvoiceCounter_Call) Run(run func()) *TransactionRepoInterface_GenerateInvoiceCounter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TransactionRepoInterface_GenerateInvoiceCounter_Call) Return(_a0 int64, _a1 error) *TransactionRepoInterface_GenerateInvoiceCounter_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TransactionRepoInterface_GenerateInvoiceCounter_Call) RunAndReturn(run func() (int64, error)) *TransactionRepoInterface_GenerateInvoiceCounter_Call {
	_c.Call.Return(run)
	return _c
}

// NewTransactionRepoInterface creates a new instance of TransactionRepoInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTransactionRepoInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *TransactionRepoInterface {
	mock := &TransactionRepoInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
