// Code generated by mockery v2.42.0. DO NOT EDIT.

package transactions

import (
	models "gotu-bookstore/cmd/gotu-bookstore/models"

	mock "github.com/stretchr/testify/mock"
)

// TransactionRepoInterface is an autogenerated mock type for the TransactionRepoInterface type
type TransactionRepoInterface struct {
	mock.Mock
}

type TransactionRepoInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *TransactionRepoInterface) EXPECT() *TransactionRepoInterface_Expecter {
	return &TransactionRepoInterface_Expecter{mock: &_m.Mock}
}

// GetAll provides a mock function with given fields: userId, limit, page, sortBy, desc
func (_m *TransactionRepoInterface) GetAll(userId string, limit int, page int, sortBy string, desc bool) ([]models.Transactions, int64, error) {
	ret := _m.Called(userId, limit, page, sortBy, desc)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []models.Transactions
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(string, int, int, string, bool) ([]models.Transactions, int64, error)); ok {
		return rf(userId, limit, page, sortBy, desc)
	}
	if rf, ok := ret.Get(0).(func(string, int, int, string, bool) []models.Transactions); ok {
		r0 = rf(userId, limit, page, sortBy, desc)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Transactions)
		}
	}

	if rf, ok := ret.Get(1).(func(string, int, int, string, bool) int64); ok {
		r1 = rf(userId, limit, page, sortBy, desc)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(string, int, int, string, bool) error); ok {
		r2 = rf(userId, limit, page, sortBy, desc)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// TransactionRepoInterface_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type TransactionRepoInterface_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
//   - userId string
//   - limit int
//   - page int
//   - sortBy string
//   - desc bool
func (_e *TransactionRepoInterface_Expecter) GetAll(userId interface{}, limit interface{}, page interface{}, sortBy interface{}, desc interface{}) *TransactionRepoInterface_GetAll_Call {
	return &TransactionRepoInterface_GetAll_Call{Call: _e.mock.On("GetAll", userId, limit, page, sortBy, desc)}
}

func (_c *TransactionRepoInterface_GetAll_Call) Run(run func(userId string, limit int, page int, sortBy string, desc bool)) *TransactionRepoInterface_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(int), args[2].(int), args[3].(string), args[4].(bool))
	})
	return _c
}

func (_c *TransactionRepoInterface_GetAll_Call) Return(_a0 []models.Transactions, _a1 int64, _a2 error) *TransactionRepoInterface_GetAll_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *TransactionRepoInterface_GetAll_Call) RunAndReturn(run func(string, int, int, string, bool) ([]models.Transactions, int64, error)) *TransactionRepoInterface_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetById provides a mock function with given fields: userId, id
func (_m *TransactionRepoInterface) GetById(userId string, id string) (*models.Transactions, error) {
	ret := _m.Called(userId, id)

	if len(ret) == 0 {
		panic("no return value specified for GetById")
	}

	var r0 *models.Transactions
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*models.Transactions, error)); ok {
		return rf(userId, id)
	}
	if rf, ok := ret.Get(0).(func(string, string) *models.Transactions); ok {
		r0 = rf(userId, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Transactions)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(userId, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TransactionRepoInterface_GetById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetById'
type TransactionRepoInterface_GetById_Call struct {
	*mock.Call
}

// GetById is a helper method to define mock.On call
//   - userId string
//   - id string
func (_e *TransactionRepoInterface_Expecter) GetById(userId interface{}, id interface{}) *TransactionRepoInterface_GetById_Call {
	return &TransactionRepoInterface_GetById_Call{Call: _e.mock.On("GetById", userId, id)}
}

func (_c *TransactionRepoInterface_GetById_Call) Run(run func(userId string, id string)) *TransactionRepoInterface_GetById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *TransactionRepoInterface_GetById_Call) Return(_a0 *models.Transactions, _a1 error) *TransactionRepoInterface_GetById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TransactionRepoInterface_GetById_Call) RunAndReturn(run func(string, string) (*models.Transactions, error)) *TransactionRepoInterface_GetById_Call {
	_c.Call.Return(run)
	return _c
}

// GetByInvoiceNumber provides a mock function with given fields: userId, invoiceNumber
func (_m *TransactionRepoInterface) GetByInvoiceNumber(userId string, invoiceNumber string) (*models.Transactions, error) {
	ret := _m.Called(userId, invoiceNumber)

	if len(ret) == 0 {
		panic("no return value specified for GetByInvoiceNumber")
	}

	var r0 *models.Transactions
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*models.Transactions, error)); ok {
		return rf(userId, invoiceNumber)
	}
	if rf, ok := ret.Get(0).(func(string, string) *models.Transactions); ok {
		r0 = rf(userId, invoiceNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Transactions)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(userId, invoiceNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TransactionRepoInterface_GetByInvoiceNumber_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByInvoiceNumber'
type TransactionRepoInterface_GetByInvoiceNumber_Call struct {
	*mock.Call
}

// GetByInvoiceNumber is a helper method to define mock.On call
//   - userId string
//   - invoiceNumber string
func (_e *TransactionRepoInterface_Expecter) GetByInvoiceNumber(userId interface{}, invoiceNumber interface{}) *TransactionRepoInterface_GetByInvoiceNumber_Call {
	return &TransactionRepoInterface_GetByInvoiceNumber_Call{Call: _e.mock.On("GetByInvoiceNumber", userId, invoiceNumber)}
}

func (_c *TransactionRepoInterface_GetByInvoiceNumber_Call) Run(run func(userId string, invoiceNumber string)) *TransactionRepoInterface_GetByInvoiceNumber_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *TransactionRepoInterface_GetByInvoiceNumber_Call) Return(_a0 *models.Transactions, _a1 error) *TransactionRepoInterface_GetByInvoiceNumber_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TransactionRepoInterface_GetByInvoiceNumber_Call) RunAndReturn(run func(string, string) (*models.Transactions, error)) *TransactionRepoInterface_GetByInvoiceNumber_Call {
	_c.Call.Return(run)
	return _c
}

// NewTransactionRepoInterface creates a new instance of TransactionRepoInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTransactionRepoInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *TransactionRepoInterface {
	mock := &TransactionRepoInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
