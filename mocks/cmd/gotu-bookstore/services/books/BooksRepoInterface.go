// Code generated by mockery v2.42.0. DO NOT EDIT.

package books

import (
	models "gotu-bookstore/cmd/gotu-bookstore/models"

	mock "github.com/stretchr/testify/mock"
)

// BooksRepoInterface is an autogenerated mock type for the BooksRepoInterface type
type BooksRepoInterface struct {
	mock.Mock
}

type BooksRepoInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *BooksRepoInterface) EXPECT() *BooksRepoInterface_Expecter {
	return &BooksRepoInterface_Expecter{mock: &_m.Mock}
}

// GetAll provides a mock function with given fields: limit, page, sortBy, desc, keyword
func (_m *BooksRepoInterface) GetAll(limit int, page int, sortBy string, desc bool, keyword string) ([]models.Books, int64, error) {
	ret := _m.Called(limit, page, sortBy, desc, keyword)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []models.Books
	var r1 int64
	var r2 error
	if rf, ok := ret.Get(0).(func(int, int, string, bool, string) ([]models.Books, int64, error)); ok {
		return rf(limit, page, sortBy, desc, keyword)
	}
	if rf, ok := ret.Get(0).(func(int, int, string, bool, string) []models.Books); ok {
		r0 = rf(limit, page, sortBy, desc, keyword)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Books)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, string, bool, string) int64); ok {
		r1 = rf(limit, page, sortBy, desc, keyword)
	} else {
		r1 = ret.Get(1).(int64)
	}

	if rf, ok := ret.Get(2).(func(int, int, string, bool, string) error); ok {
		r2 = rf(limit, page, sortBy, desc, keyword)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// BooksRepoInterface_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type BooksRepoInterface_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
//   - limit int
//   - page int
//   - sortBy string
//   - desc bool
//   - keyword string
func (_e *BooksRepoInterface_Expecter) GetAll(limit interface{}, page interface{}, sortBy interface{}, desc interface{}, keyword interface{}) *BooksRepoInterface_GetAll_Call {
	return &BooksRepoInterface_GetAll_Call{Call: _e.mock.On("GetAll", limit, page, sortBy, desc, keyword)}
}

func (_c *BooksRepoInterface_GetAll_Call) Run(run func(limit int, page int, sortBy string, desc bool, keyword string)) *BooksRepoInterface_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(int), args[2].(string), args[3].(bool), args[4].(string))
	})
	return _c
}

func (_c *BooksRepoInterface_GetAll_Call) Return(_a0 []models.Books, _a1 int64, _a2 error) *BooksRepoInterface_GetAll_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *BooksRepoInterface_GetAll_Call) RunAndReturn(run func(int, int, string, bool, string) ([]models.Books, int64, error)) *BooksRepoInterface_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetById provides a mock function with given fields: id
func (_m *BooksRepoInterface) GetById(id string) (*models.Books, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetById")
	}

	var r0 *models.Books
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*models.Books, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *models.Books); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Books)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BooksRepoInterface_GetById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetById'
type BooksRepoInterface_GetById_Call struct {
	*mock.Call
}

// GetById is a helper method to define mock.On call
//   - id string
func (_e *BooksRepoInterface_Expecter) GetById(id interface{}) *BooksRepoInterface_GetById_Call {
	return &BooksRepoInterface_GetById_Call{Call: _e.mock.On("GetById", id)}
}

func (_c *BooksRepoInterface_GetById_Call) Run(run func(id string)) *BooksRepoInterface_GetById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *BooksRepoInterface_GetById_Call) Return(_a0 *models.Books, _a1 error) *BooksRepoInterface_GetById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BooksRepoInterface_GetById_Call) RunAndReturn(run func(string) (*models.Books, error)) *BooksRepoInterface_GetById_Call {
	_c.Call.Return(run)
	return _c
}

// NewBooksRepoInterface creates a new instance of BooksRepoInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBooksRepoInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *BooksRepoInterface {
	mock := &BooksRepoInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
